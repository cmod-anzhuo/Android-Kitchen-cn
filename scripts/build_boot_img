############################################################################
#
# Copyright (c) 2011 - dsixda (dislam@rocketmail.com)
#
# Android Kitchen is 100% free.  This script file is intended for personal
# and/or educational use only.  It may not be duplicated for monetary
# benefit or any other purpose without the permission of the developer.
#
############################################################################

#
# This script has three optional parameters:
#
# $1 = page size / kernel offset in boot.img (in decimal)
# $2 = kernel base offset (in hexadecimal, e.g. 0x200000; needs $1 defined)
# $3 = command line (needs $1 and $2 defined)
#

echo

if [ -d BOOT-EXTRACTED ]
then
  echo "已找到 BOOT-EXTRACTED 文件夹，正在检查其内容 ..."

  if [ -d BOOT-EXTRACTED/boot.img-ramdisk ]
  then
    echo "已找到 boot.img-ramdisk"

    if [ -e BOOT-EXTRACTED/zImage ]
    then
      echo "已找到 zImage"
    else
      echo "未找到 BOOT-EXTRACTED/zImage"
      exit 0
    fi

  else
    echo "未找到 boot-extracted/boot.img-ramdisk 文件夹！"
    exit 0
  fi

else
  echo "未找到 BOOT-EXTRACTED 文件夹！"
  exit 0
fi


if [ -d WORKING_* ]
then
  echo "已找到工作目录"
else
  echo "未找到工作目录！"
  exit 0
fi



if [ "$1" == "" ]
then

  #
  # Determine the kernel offset to be used in the new boot.img, 
  # based on the current boot.img or /boot folder.
  #

  cd WORKING_*

  if [ -e boot.img ] 
  then
   
    cd ..
    scripts/check_kernel_offset
    res=$?

    if [ "$res" != "0" ]
    then
      exit 0
    fi
    
    # Modify mkbootimg.c
    scripts/set_ramdisk_addr

  else

    if [ ! -e boot/initrd.gz ] || [ ! -e boot/zImage ]
    then
      echo "未在工作目录中找到 boot.img！"
      cd ..
      exit 0
    else

      # Using a fake base address and command line to create the boot.img, since
      # we don't have a boot.img and are using the NAND method; boot.img won't 
      # be in final NAND ROM.

      base=0x11800000     
      cmd_line="dsixda NAND"

      cd ..
    fi
  fi

else

  #
  # Using hard-coded values 
  #

  scripts/set_kernel_offset_files $1

  if [ "$2" != "" ]
  then
    base=$2
    
    if [ "$3" != "" ]
    then
      cmd_line=$3
    fi
  fi

fi



#
# Compile mkboot*
#

mkbootimg_src=mkbootimg.c
mkbootimg_out=mkbootimg

if [ `uname | grep CYGWIN` ]
then
  mkbootfs_file=mkbootfs.exe
  mkbootimg_file=$mkbootimg_out.exe
else
  mkbootfs_file=mkbootfs
  mkbootimg_file=$mkbootimg_out
fi


if [ -e tools/mkboot/$mkbootfs_file ]
then
  echo "已找到 $mkbootfs_file"
else
  echo
  echo "编译 mkbootfs ..."
  cd tools/mkboot
  gcc -o mkbootfs mkbootfs.c
  cd ../..

  if [ -e tools/mkboot/$mkbootfs_file ]
  then
    echo "已成功编译 mkbootfs"
  else
    echo "错误：未能成功编译 mkbootfs！"
    exit 0   
  fi
fi


if [ -e tools/mkboot/$mkbootimg_file ]
then
  rm -f $mkbootimg_file
fi

echo
  echo "编译 mkbootimg ..."
cd tools/mkboot
gcc -c rsa.c
gcc -c sha.c
gcc rsa.o sha.o $mkbootimg_src -w -o $mkbootimg_out
rm *.o
cd ../..

if [ -e tools/mkboot/$mkbootimg_file ]
then
    echo "已成功编译 $mkbootimg_out"
else
    echo "错误：未能成功编译 $mkbootimg_out！"
  exit 0
fi    


cp tools/mkboot/$mkbootfs_file BOOT-EXTRACTED/
cp tools/mkboot/$mkbootimg_file BOOT-EXTRACTED/
cd BOOT-EXTRACTED


#
# Run mkbootfs
#

echo 
echo "正在创建 ramdisk cpio 存档 ..."
./$mkbootfs_file boot.img-ramdisk | gzip > ramdisk.gz




cd ..
cd WORKING_*

if [ -e boot.img ]
then

  cd ..
  echo

  #
  # Get original size of boot.img
  #
  size_orig=`scripts/get_boot_img_size`


  #
  # Determine kernel base address before running mkbootimg
  #

  if [ "$base" == "" ]
  then
    echo "正在尝试确定内核的基础地址 ......"
    base=`scripts/get_kernel_base_addr`
  fi

echo "使用 $base 作为基础地址"

  #
  # If no parameters entered, then find out the command line
  #
  # NOTE: Check the first two parameters to determine whether the user set the
  # command line to an empty string intentionally
  #
  if [ "$3" == "" ]  && [ "$1" == "" ]
  then
    echo "正在尝试确定命令行参数 ..."
    cmd_line=`scripts/get_cmdline`
  fi

  if [ "$cmd_line" == "" ]
  then
    echo "未找到命令行"
  else
    echo "使用命令行：$cmd_line"
  fi    

else
  cd ..
fi  


#
# Run mkbootimg
#

cd BOOT-EXTRACTED

echo
echo "正在打包新boot.img ..."

if [ "$cmd_line" == "" ]
then
  ./$mkbootimg_file --kernel zImage --ramdisk ramdisk.gz -o newBoot.img --base $base
else
  ./$mkbootimg_file --kernel zImage --ramdisk ramdisk.gz --cmdline "$cmd_line" -o newBoot.img --base $base
fi

if [ -e newBoot.img ]
then
  echo
  echo "已创建 newBoot.img"

  echo "正在复制为工作目录中的 boot.img"
  cd ../WORKING_*
  mv -f ../BOOT-EXTRACTED/newBoot.img boot.img

  if [ "$size_orig" != "" ]
  then

    #
    # Get new size of boot.img
    #
    cd ..
    size_new=`scripts/get_boot_img_size`
    cd WORKING_*

    if [ "$size_new" != "" ]
    then
      echo
      echo "boot.img 大小"
      echo "旧: $size_orig"
      echo "新: $size_new"
    fi
  fi

  if [ -d boot ] && [ -e boot/initrd.gz ] && [ -e boot/zImage ]
  then
    echo
    echo "正在删除 NAND boot 文件夹 ..."
    rm -rf boot
  fi

  cd ..
    
  echo
  echo "正在移除 BOOT-EXTRACTED 文件夹 ..."
  rm -rf BOOT-EXTRACTED
  
  exit_code=1

else
  echo
  echo "未创建 newBoot.img！"

  rm $mkbootfs_file
  rm $mkbootimg_file

  cd ..
  exit_code=0
fi

exit $exit_code
