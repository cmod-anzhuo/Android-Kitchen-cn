############################################################################
#
# Copyright (c) 2010-2011 dsixda - dislam@rocketmail.com
#
# Android Kitchen is 100% free.  This script file is intended for personal
# and/or educational use only.  It may not be duplicated for monetary
# benefit or any other purpose without the permission of the developer.
#
############################################################################


if [ "$1" == "" ]
then
  clear
fi


echo

base_dir=`pwd`

if [ -d WORKING_* ]
then

  cd WORKING_*
  working_dir=`pwd`

  cd META-INF/com/google/android

else
  echo
  echo "未找到工作目录，你需要先创建一个！"
  exit 0
fi


if [ "$1" == "" ]
then

  echo "转换工具: updater-script (Edify) 到 update-script (Amend)"
  echo "--------------------------------------------------------------------"
  echo
  echo "该工具将会将 updater-script 转换为 update-script。"
  echo
  echo "请确定你的工作目录中的META-INF/com/google/android文件夹中有 updater-script。"
  echo
  echo -n "继续进行转换 (y/n)? (默认为: y): "

  read proceed_now
  echo

  if [ "$proceed_now" == "n" ] 
  then
    cd ../../../../..
    exit 0
  fi

  echo "--------------------------------------------------------------------"
  echo

fi

if [ -e updater-script ]
then
  
  if [ -e update-script ]
  then
    echo "错误: 尽管在你的工作目录下有一个updater-script，但同时也有一个"
    echo "      update-script，请移除一个。"
    echo

    echo -n "移除 update-script 并继续转换 (y/n)? (默认为: y) "
    read remove_it
    echo
    if [ "$remove_it" != "n" ]
    then
      rm -vf update-script
      echo
      echo
      echo "--------------------------------------------------------------------"
      echo

    else
      cd ../../../../..
      exit 0
    fi
  fi

else
  echo "错误:未发现 updater-script！"
  cd ../../../../..
  exit 0
fi




echo "转换为update-script, 请稍等 ..."
echo


echo "- 初步格式化 ..."

# The 'strings' command is used in case the ui_print statement has special symbols in it
more updater-script \
  | strings \
  | sed -e ':a;N;$!ba;s/ui_print("[^"]*");//g' \
  | sed -e ':a;N;$!ba;s/||[ ]*\n//g' \
  | sed -e ':a;N;$!ba;s/,[ ]*\n//g' \
  | sed -e 's/","/", "/g' \
        -e 's/\([0-9]*\),[ ]*\([0-9]*\)/\1, \2/g' \
        -e 's/^\([a-zA-Z_]*\)[ ]*(/\1(/g' \
> temp.log


#
# Replace tabs with spaces!
#
tr '\011' ' ' <temp.log >temp.log.new
mv -f temp.log.new temp.log


#
# Remove comments
#
sed -i -e '/^#/d' temp.log



#
# assert
#
echo "- assert ..."
line_num=`sed -n -e '/assert(/{=;q}' temp.log`

while [ "$line_num" != "" ]
do
  sed -i \
    -e ''$line_num' s/assert(\(.*\)").*);/\1");/g' \
    -e ''$line_num' s/^.*getprop.*;//g' \
    temp.log

  if [ -e ../../../../radio.img ]
  then
    sed -i -e ''$line_mum' s/^.*install_radio.*;/write_radio_image PACKAGE:radio.img/g' temp.log
  else
    sed -i -e ''$line_num' s/^.*install_radio.*;//g' temp.log
  fi

  if [ -e ../../../../hboot.img ]
  then
    sed -i -e ''$line_mum' s/^.*install_hboot.*;/write_hboot_image PACKAGE:hboot.img/g' temp.log
  else
    sed -i -e ''$line_num' s/^.*install_hboot.*;//g' temp.log
  fi

  sed -i \
    -e ''$line_num' s/)[ ]*/);\n/g' \
    -e 's/^;$//g' \
    temp.log

  line_num=`sed -n -e '/assert(/{=;q}' temp.log`
done


#
# boot.img / radio.img / bootloader.img
#
echo "- write_raw_image ..."

img_list=( boot radio bootloader )
temp_list=( tmp cache )


for (( t = 0 ; t < ${#temp_list[@]} ; t++ ))
do

  temp_name=${temp_list[${t}]}

  for (( i = 0 ; i < ${#img_list[@]} ; i++ ))
  do

    #
    # Replace 3 consecutive lines if they match the required strings
    #

    img_name=${img_list[${i}]}

    if [ -e ../../../../$img_name.img ]
    then
      sed -i -e ':a;N;$!ba;s/package_extract_file("'"$img_name"'.img", "\/'"$temp_name"'\/'"$img_name"'.img");\n[ ]*write_raw_image("\/'"$temp_name"'\/'"$img_name"'.img", "[^"]*");\n[ ]*delete("\/'"$temp_name"'\/'"$img_name"'.img");/write_raw_image PACKAGE:'"$img_name"'.img/g' temp.log
    else
      sed -i -e ':a;N;$!ba;s/package_extract_file("'"$img_name"'.img", "\/'"$temp_name"'\/'"$img_name"'.img");\n[ ]*write_raw_image("\/'"$temp_name"'\/'"$img_name"'.img", "[^"]*");\n[ ]*delete("\/'"$temp_name"'\/'"$img_name"'.img");//g' temp.log
    fi

  done
done

sed -i -e 's/write_raw_image("boot.img", "boot");/write_raw_image PACKAGE:boot.img BOOT:/g' temp.log
sed -i -e 's/write_raw_image PACKAGE:boot.img$/write_raw_image PACKAGE:boot.img BOOT:/g' temp.log


#
# Dell Streak
#
if [ -e ../../../../boot.img ]
then
  sed -i -e ':a;N;$!ba;s/package_extract_file("boot.img", "\/tmp\/boot.img");\n[ ]*write_boot_raw_image("\/tmp\/boot.img", "boot");\n[ ]*delete("\/tmp\/boot.img");/write_raw_image PACKAGE:boot.img BOOT:/g' temp.log
else
  sed -i -e ':a;N;$!ba;s/package_extract_file("boot.img", "\/tmp\/boot.img");\n[ ]*write_boot_raw_image("\/tmp\/boot.img", "boot");\n[ ]*delete("\/tmp\/boot.img");//g' temp.log
fi
if [ -e ../../../../blob ]
then
  sed -i -e ':a;N;$!ba;s/package_extract_file("blob", "\/tmp\/blob");\n[ ]*write_blob_raw_image("\/tmp\/blob", "staging");\n[ ]*delete("\/tmp\/blob");/write_blob_raw_image PACKAGE:blob/g' temp.log
else
  sed -i -e ':a;N;$!ba;s/package_extract_file("blob", "\/tmp\/blob");\n[ ]*write_blob_raw_image("\/tmp\/blob", "staging");\n[ ]*delete("\/tmp\/blob");//g' temp.log
fi



#
# run_program
#
echo "- run_program ..."
line_num=`sed -n -e '/run_program(/{=;q}' temp.log`

while [ "$line_num" != "" ]
do

  # run_program spans multiple lines
  has_end=`sed -n -e ''$line_num'p' temp.log | grep -c "\");[ ]*$"`
  
  # Combine the next line
  while [ $has_end == 0 ]
  do
    # N = read next line
    sed -i -e ''$line_num'N;s/\n/[cr]/g' temp.log

    has_end=`sed -n -e ''$line_num'p' temp.log | grep -c "\");[ ]*$"`
  done

  sed -i \
    -e ''$line_num' s/ /\[sp\]/g' \
    -e ''$line_num' s/",\[sp\]"/ /g' \
    -e ''$line_num' s/,/\[co\]/g' \
    -e ''$line_num' s/run_program("/run_program /g' \
    -e ''$line_num' s/run_program \/\([a-zA-Z]*\)/run_program PACKAGE:\1/g' \
    -e ''$line_num' s/run_program PACKAGE:\//run_program \//g' \
    -e ''$line_num' s/);//g' \
    -e ''$line_num' s/;/\[sc\]/g' \
    temp.log

  line_num=`sed -n -e '/run_program(/{=;q}' temp.log`
done



#
# delete
#
echo "- delete ..."
line_num=`sed -n -e '/delete(/{=;q}' temp.log`

while [ "$line_num" != "" ]
do
  sed -i \
    -e ''$line_num' s/delete(/delete /g' \
    -e ''$line_num' s/"//g' \
    -e ''$line_num' s/, /\ndelete /g' \
    -e ''$line_num' s/)//g' \
    -e ''$line_num' s/;//g' \
    temp.log

  line_num=`sed -n -e '/delete(/{=;q}' temp.log`
done


#
# Remove apply_patch
#
sed -i -e 's/apply_patch.*[;]//g' temp.log




#
# symlink
#
echo "- symlink ..."

# If the symlink command consists of only target file, then use this
sed -i -e 's/symlink("\([^\"]*\)", "\([^\"]*\)");/symlink \1 \2/g' temp.log

line_num=`sed -n -e '/symlink(/{=;q}' temp.log`

while [ "$line_num" != "" ]
do

  cp -f temp.log temp.log.old

  src=`sed -ne ''$line_num' s/symlink("\([^"]*\)".*/\1/pg' temp.log`

  # sed1 : The formatting code near the top of this conversion script may have removed some commas
  # sed2 : All targets will be moved to their own line
  # sed3 : Fix up last line
  sed -i \
    -e ''$line_num' s/"[ ]*"/", "/g' \
    -e ''$line_num' s/", "/\nsymlink '"$src"' /g' \
    -e ''$line_num' s/");//g' \
  temp.log 

  # No longer need first line after all targets moved to other lines
  sed -i -e ''$line_num'd' temp.log

  #
  # Ensure we are not stuck in an endless loop doing nothing
  #
  if [ "`diff temp.log temp.log.old`" == "" ]
  then
    echo
    echo "错误：转换符号链接时出错"
    rm -f temp.log.old temp.log
    exit 1
  fi

  line_num=`sed -n -e '/symlink(/{=;q}' temp.log`

done

rm -rf temp.log.old




echo "- 格式化完成 ..."

#
# Fix up the update-script 
#
sed -i \
  -e 's/;//g' \
  -e 's/,//g' \
  -e 's/(/ /g' \
  -e 's/)//g' \
  -e 's/^mount .*//g' \
  -e 's/^unmount .*//g' \
  -e 's/package_extract_dir \"\([^ ]*\)/copy_dir PACKAGE:\1/g' \
  \
  -e 's/\/system\//SYSTEM:/g' \
  -e 's/ \/system/ SYSTEM:/g' \
  -e 's/"\/system"/SYSTEM:/g' \
  -e 's/\"system\"/SYSTEM:/g' \
  -e 's/\"SYSTEM:\"/SYSTEM:/g' \
  -e 's/\" SYSTEM/ SYSTEM/g' \
  -e 's/\"SYSTEM:\([^\"]*\)\"/SYSTEM:\1/g' \
  -e 's/symlink SYSTEM:/symlink \/system\//g' \
  \
  -e 's/\/tmp\//TMP:/g' \
  -e 's/ \/tmp/ TMP:/g' \
  -e 's/"\/tmp"/TMP:/g' \
  -e 's/\"tmp\"/TMP:/g' \
  -e 's/\"TMP:\"/TMP:/g' \
  -e 's/\" TMP/ TMP/g' \
  -e 's/ \"TMP:/ TMP:/g' \
  \
  -e 's/\/data\//DATA:/g' \
  -e 's/ \/data/ DATA:/g' \
  -e 's/"\/data"/DATA:/g' \
  -e 's/\"data\"/DATA:/g' \
  -e 's/\"DATA:\"/DATA:/g' \
  -e 's/\" DATA/ DATA/g' \
  -e 's/"userdata"/DATA:/g' \
  -e 's/\"DATA:\([^\"]*\)\"/DATA:\1/g' \
  -e 's/symlink DATA:/symlink \/data\//g' \
  \
  -e 's/\/sdcard\//SDCARD:/g' \
  -e 's/ \/sdcard/ SDCARD:/g' \
  -e 's/"\/sdcard"/SDCARD:/g' \
  -e 's/\"sdcard\"/SDCARD:/g' \
  -e 's/\"SDCARD:\"/SDCARD:/g' \
  -e 's/\" SDCARD/ SDCARD/g' \
  \
  -e 's/\/cache\//CACHE:/g' \
  -e 's/ \/cache/ CACHE:/g' \
  -e 's/"\/cache"/CACHE:/g' \
  -e 's/\"cache\"/CACHE:/g' \
  -e 's/\"CACHE:\"/CACHE:/g' \
  -e 's/\" CACHE/ CACHE/g' \
  \
  -e 's/\/sdext\//SDEXT:/g' \
  -e 's/ \/sdext/ SDEXT:/g' \
  -e 's/"\/sdext"/SDEXT:/g' \
  -e 's/\"sdext\"/SDEXT:/g' \
  -e 's/\"SDEXT:\"/SDEXT:/g' \
  -e 's/\" SDEXT/ SDEXT/g' \
  \
  -e 's/"\/boot\//BOOT:/g' \
  -e 's/"\/boot/BOOT:/g' \
  -e 's/ \/boot\// BOOT:/g' \
  -e 's/"\/boot"/BOOT:/g' \
  -e 's/\"boot\"/BOOT:/g' \
  -e 's/\"BOOT:\"/BOOT:/g' \
  -e 's/\" BOOT/ BOOT/g' \
  \
  -e 's/\"MTD //g' \
  -e 's/set_perm\([^\"]*\)\"\([^\"]*\)\"/set_perm\1\2/g' \
  -e 's/\"\([^\"]*\)\"/\1/g' \
  -e 's/^[ \t]*//g' \
  -e 's/\/$//g' \
  -e 's/"$/\n/g' \
temp.log



#
# Patch up any conversion issues here
#

sed -i \
  -e 's/MTD //g' \
  -e 's/ system\// SYSTEM:/g' \
  -e 's/ tmp\// TMP:/g' \
  -e 's/ data\// DATA:/g' \
  -e 's/ sdcard\// SDCARD:/g' \
  -e 's/ cache\// CACHE:/g' \
  -e 's/ sdext\// SDEXT:/g' \
  -e 's/ boot\// BOOT:/g' \
  -e 's/\(symlink [^ ]*\)SYSTEM:/\1\/system\//g'  \
  -e 's/\(symlink [^ ]*\)DATA:/\1\/data\//g'  \
  -e 's/\(symlink [^ ]*\)CACHE:/\1\/cache\//g'  \
  -e 's/\(symlink [^ ]*\)TMP:/\1\/tmp\//g'  \
  -e 's/\(symlink [^ ]*\)SDCARD:/\1\/sdcard\//g'  \
  -e 's/\(symlink [^ ]*\)SDEXT:/\1\/sdext\//g'  \
  -e 's/\(symlink [^ ]*\)BOOT:/\1\/boot\//g'  \
  -e 's/\(package_extract_file\) SYSTEM:/\1 system\//g'  \
  -e 's/\(package_extract_file\) DATA:/\1 data\//g'  \
  -e 's/\(package_extract_file\) CACHE:/\1 cache\//g'  \
  -e 's/\(package_extract_file\) TMP:/\1 tmp\//g'  \
  -e 's/\(package_extract_file\) SDCARD:/\1 sdcard\//g'  \
  -e 's/\(package_extract_file\) SDEXT:/\1 sdext\//g'  \
  -e 's/\(package_extract_file\) BOOT:/\1 boot\//g'  \
temp.log


#
# Remove blank lines
#
sed -i -e '/^$/d' temp.log


#
# Replace the 3 consecutive lines created in updater-script when a script from the
# *base directory* of ROM is used in run_program.  
#
# e.g.
#
#   package_extract_file("backuptool.sh", "/tmp/backuptool.sh");
#   set_perm(0, 0, 0777, "/tmp/backuptool.sh");
#   run_program("/tmp/backuptool.sh", "backup");
#
# (Ensure there are no blank lines in file)
#

line_list=`grep -n package_extract_file temp.log`
line_num_list=`echo "$line_list" | sed -e 's/\([0-9]*\).*/\1/g'`

# Increase this if the lines are changed
move_lines=0

for line_num in $line_num_list
do

  line_num1=$(($line_num-$move_lines))

  curr_line=`sed -n -e ''$line_num1'p' temp.log`
  src=`echo "$curr_line" | sed -e 's/package_extract_file \(.*\) .*/\1/'`

  test_src=`echo "$src" | grep -c "/"`
  if [ $test_src == 1 ]
  then
    continue
  else 
    sed -i -e ''$line_num1' s/\(package_extract_file \)\(.*\) /\1PACKAGE:\2 /g' temp.log
  fi  

  partition=`echo "$curr_line" | sed -e 's/package_extract_file .* \([^:]*\):\(.*\)/\1/'`
  filename=`echo "$curr_line" | sed -n -e ''$line_num1'p' temp.log | sed -e 's/package_extract_file .* \([^:]*\):\(.*\)/\2/'`

  if [ "$partition" == "TMP" ] || [ "$partition" == "CACHE" ]
  then
  
    line_num2=$(($line_num1+1))
    expect_line2="set_perm 0 0 0777 $partition:$filename"
    actual_line2=`sed -n -e ''$line_num2'p' temp.log`

    if [ "$actual_line2" == "$expect_line2" ]
    then
      line_num3=$(($line_num2+1))
      small_partition=`echo $partition | sed 's/\([A-Z]*\)/\L\1/g'`
      expect_line3="run_program PACKAGE:$small_partition/$filename"
      actual_line3=`sed -n -e ''$line_num3'p' temp.log`

      res=`echo $actual_line3 | grep -c "$expect_line3"`
      if [ $res == 1 ]
      then
        sed -i -e ''"$line_num1"','"$line_num2"'d' temp.log
        sed -i -e ''$line_num1' s/run_program PACKAGE:'"$small_partition"'\/\(.*\)/run_program PACKAGE:\1/g' temp.log

        move_lines=$(($move_lines+2))
      fi
    fi
  fi
done



#
# Finished
#

mv -f temp.log update-script
rm -f temp.log.old


#
# Device-specific mount points
#
cd ../../../../..
scripts/adjust_mnt update-script
cd WORKING_*
cd META-INF/com/google/android



echo

if [ -e update-script ]
then

  mv -f updater-script updater-script.orig

  echo "--------------------------------------------------------------------"
  echo
  echo "已在META-INF/com/google/android文件夹下创建了一个新的update-script。"
  echo "请检查一下，确定其中没有错误。"
  echo ""
  echo "原updater-script已经被重命名为updater-script.orig。"
  echo "它并不会包含在你打包好的 ROM 中。但是请不要移除它，它同样是厨房所必须的。"
  echo

  if [ -e update-binary ]
  then
    mv -f update-binary update-binary.orig
    echo "update-binary 也已被重命名为 update-binary.orig。"
  fi

  cd $base_dir
  scripts/update_script_should_convert_back

  if [ "$?" == "1" ]
  then
    echo
    echo "警告：由于 Edify 和 Amend 两种脚本之间存在着一些不兼容，此"
    echo "     update-script 将会被自动转换为 updater-script 以用"
    echo "     于 ROM 之中。当然，在打包之前你的工作目录中使用的依然"
    echo "     是update-script。"
    echo
  fi

else
  echo "错误: update-script 创建失败！"
fi

cd $base_dir
